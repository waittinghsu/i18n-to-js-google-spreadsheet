#!/usr/bin/env node
const configPath = process.argv[2];
const loadPath = !!configPath ? configPath.split('=')[1] : process.cwd();

const path = require('path');
const fs = require('fs');

// 檢查配置檔是否存在
const configFilePath = path.resolve(loadPath, 'i18n-to-js.config.js');
if (!fs.existsSync(configFilePath)) {
  console.log('📄 找不到配置檔：i18n-to-js.config.js');
  console.log('🔧 自動建立基本配置檔...');

  // 直接複製 config.js 檔案作為配置檔
  const defaultConfigPath = path.resolve(__dirname, '../src/lib/config.js');

  try {
    fs.copyFileSync(defaultConfigPath, configFilePath);
    console.log('✅ 已自動建立配置檔：i18n-to-js.config.js');
    console.log('⚠️  請編輯配置檔並填入正確的 API Key 和檔案路徑');
  } catch (error) {
    console.error('❌ 建立配置檔失敗:', error.message);
    console.error('📝 請手動複製 i18n-to-js.config.example.js 為 i18n-to-js.config.js');
    process.exit(1);
  }
}

const option = require(configFilePath);
const { coreForGoogle, coreForLocal } = require('../src/lib/index');

console.log('🐢 🐢 google excel 擷取中 🐢🐢🐢 🧗...');
const { mode = 'LOCAL' } = option;

switch (mode) {
  case 'LOCAL':
	  console.log('🦀 LOCAL 🦀');
    coreForLocal(option);
    break;
  case 'GOOGLE_SHEET':
	  console.log('🦀 GOOGLE_SHEET 🦀');
    coreForGoogle(option).then(() => {
      console.log('🎉 生成完成 🎉');
    }).catch((err) => {
      console.error(`👹 媽逼炸了‍${err}`);
    });
    break;
  default:
    break;
}
